// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 03:56:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TuringMachineDev
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TuringMachineDev_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key0;
reg key1;
reg key2;
reg key3;
reg key4;
reg key5;
reg key6;
reg keyHash;
reg quit;
reg rerun;
reg resume;
reg rst;
// wires                                               
wire [5:0] address;
wire com1;
wire com2;
wire com3;
wire com4;
wire com5;
wire com6;
wire com7;
wire com8;
wire [2:0] cur;
wire led1;
wire led2;
wire led3;
wire led4;
wire led5;
wire led6;
wire led7;
wire led8;
wire [1:0] move;
wire [2:0] nextQ;
wire [13:0] s;
wire sega;
wire segb;
wire segc;
wire segd;
wire sege;
wire segf;
wire segg;
wire single_a;
wire single_b;
wire single_c;
wire single_d;
wire single_e;
wire single_f;
wire single_g;
wire [127:0] tape;
wire [15:0] window;
wire [1:0] writeS;

// assign statements (if any)                          
TuringMachineDev i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clk(clk),
	.com1(com1),
	.com2(com2),
	.com3(com3),
	.com4(com4),
	.com5(com5),
	.com6(com6),
	.com7(com7),
	.com8(com8),
	.cur(cur),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.key4(key4),
	.key5(key5),
	.key6(key6),
	.keyHash(keyHash),
	.led1(led1),
	.led2(led2),
	.led3(led3),
	.led4(led4),
	.led5(led5),
	.led6(led6),
	.led7(led7),
	.led8(led8),
	.move(move),
	.nextQ(nextQ),
	.quit(quit),
	.rerun(rerun),
	.resume(resume),
	.rst(rst),
	.s(s),
	.sega(sega),
	.segb(segb),
	.segc(segc),
	.segd(segd),
	.sege(sege),
	.segf(segf),
	.segg(segg),
	.single_a(single_a),
	.single_b(single_b),
	.single_c(single_c),
	.single_d(single_d),
	.single_e(single_e),
	.single_f(single_f),
	.single_g(single_g),
	.tape(tape),
	.window(window),
	.writeS(writeS)
);
initial 
begin 
#20000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #30000 1'b0;
end 

// key0
initial
begin
	key0 = 1'b0;
	key0 = #5680000 1'b1;
	key0 = #160000 1'b0;
	key0 = #1400000 1'b1;
	key0 = #160000 1'b0;
	key0 = #400000 1'b1;
	key0 = #160000 1'b0;
end 

// key1
initial
begin
	key1 = 1'b0;
	key1 = #1360000 1'b1;
	key1 = #120000 1'b0;
	key1 = #80000 1'b1;
	key1 = #120000 1'b0;
	key1 = #1640000 1'b1;
	key1 = #160000 1'b0;
	key1 = #680000 1'b1;
	key1 = #160000 1'b0;
	key1 = #80000 1'b1;
	key1 = #160000 1'b0;
	key1 = #320000 1'b1;
	key1 = #160000 1'b0;
	key1 = #80000 1'b1;
	key1 = #160000 1'b0;
	key1 = #920000 1'b1;
	key1 = #160000 1'b0;
	key1 = #1160000 1'b1;
	key1 = #160000 1'b0;
	key1 = #400000 1'b1;
	key1 = #160000 1'b0;
	key1 = #800000 1'b1;
	key1 = #240000 1'b0;
	key1 = #560000 1'b1;
	key1 = #240000 1'b0;
	key1 = #160000 1'b1;
	key1 = #160000 1'b0;
	key1 = #160000 1'b1;
	key1 = #240000 1'b0;
	key1 = #3440000 1'b1;
	key1 = #160000 1'b0;
	key1 = #240000 1'b1;
	key1 = #160000 1'b0;
	key1 = #160000 1'b1;
	key1 = #160000 1'b0;
	key1 = #160000 1'b1;
	key1 = #160000 1'b0;
end 

// key2
initial
begin
	key2 = 1'b0;
	key2 = #1160000 1'b1;
	key2 = #120000 1'b0;
	key2 = #480000 1'b1;
	key2 = #120000 1'b0;
	key2 = #80000 1'b1;
	key2 = #120000 1'b0;
	key2 = #440000 1'b1;
	key2 = #160000 1'b0;
	key2 = #120000 1'b1;
	key2 = #160000 1'b0;
	key2 = #120000 1'b1;
	key2 = #160000 1'b0;
	key2 = #320000 1'b1;
	key2 = #160000 1'b0;
	key2 = #920000 1'b1;
	key2 = #160000 1'b0;
	key2 = #1160000 1'b1;
	key2 = #160000 1'b0;
	key2 = #320000 1'b1;
	key2 = #160000 1'b0;
	key2 = #80000 1'b1;
	key2 = #160000 1'b0;
	key2 = #1560000 1'b1;
	key2 = #160000 1'b0;
	key2 = #880000 1'b1;
	key2 = #240000 1'b0;
	key2 = #2640000 1'b1;
	key2 = #240000 1'b0;
	key2 = #320000 1'b1;
	key2 = #160000 1'b0;
	key2 = #880000 1'b1;
	key2 = #160000 1'b0;
end 

// key3
initial
begin
	key3 = 1'b0;
end 

// key4
initial
begin
	key4 = 1'b0;
end 

// key5
initial
begin
	key5 = 1'b0;
end 

// key6
initial
begin
	key6 = 1'b0;
end 

// keyHash
initial
begin
	keyHash = 1'b0;
end 

// quit
initial
begin
	quit = 1'b0;
	quit = #8720000 1'b1;
	quit = #160000 1'b0;
end 

// resume
initial
begin
	resume = 1'b0;
	resume = #2240000 1'b1;
	resume = #120000 1'b0;
	resume = #1520000 1'b1;
	resume = #120000 1'b0;
	resume = #1400000 1'b1;
	resume = #120000 1'b0;
	resume = #1400000 1'b1;
	resume = #120000 1'b0;
	resume = #4000000 1'b1;
	resume = #160000 1'b0;
	resume = #4480000 1'b1;
	resume = #160000 1'b0;
end 

// rerun
initial
begin
	rerun = 1'b0;
	rerun = #13280000 1'b1;
	rerun = #320000 1'b0;
end 
endmodule

