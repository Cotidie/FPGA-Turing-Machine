// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2021 03:33:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TableRegister
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TableRegister_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [2:0] Keypad;
reg rst_n;
reg s2;
reg s3;
reg s4;
reg s5;
reg s6;
reg s7;
// wires                                               
wire [1:0] move;
wire [2:0] nextQ;
wire [1:0] writeS;

// assign statements (if any)                          
TableRegister i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Keypad(Keypad),
	.move(move),
	.nextQ(nextQ),
	.rst_n(rst_n),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.writeS(writeS)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #12000 1'b1;
	#8000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 

// s2
initial
begin
	s2 = 1'b0;
	s2 = #10000 1'b1;
	s2 = #20000 1'b0;
end 

// s3
initial
begin
	s3 = 1'b0;
	s3 = #30000 1'b1;
	s3 = #20000 1'b0;
end 

// s4
initial
begin
	s4 = 1'b0;
	s4 = #50000 1'b1;
	s4 = #20000 1'b0;
end 

// s5
initial
begin
	s5 = 1'b0;
	s5 = #70000 1'b1;
	s5 = #20000 1'b0;
end 

// s6
initial
begin
	s6 = 1'b0;
	s6 = #90000 1'b1;
	s6 = #20000 1'b0;
end 

// s7
initial
begin
	s7 = 1'b0;
	s7 = #110000 1'b1;
	s7 = #20000 1'b0;
end 
// Keypad[ 2 ]
initial
begin
	Keypad[2] = 1'b0;
end 
// Keypad[ 1 ]
initial
begin
	Keypad[1] = 1'b0;
	Keypad[1] = #50000 1'b1;
	Keypad[1] = #20000 1'b0;
	Keypad[1] = #20000 1'b1;
	Keypad[1] = #20000 1'b0;
end 
// Keypad[ 0 ]
initial
begin
	Keypad[0] = 1'b0;
	Keypad[0] = #10000 1'b1;
	Keypad[0] = #20000 1'b0;
	Keypad[0] = #40000 1'b1;
	Keypad[0] = #20000 1'b0;
end 
endmodule

