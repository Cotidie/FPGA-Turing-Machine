// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2021 02:44:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg quit;
reg rerun;
reg resume;
reg rst_n;
reg stable;
reg trigger;
// wires                                               
wire [13:0] sig;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.quit(quit),
	.rerun(rerun),
	.resume(resume),
	.rst_n(rst_n),
	.sig(sig),
	.stable(stable),
	.trigger(trigger)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// quit
initial
begin
	quit = 1'b0;
	quit = #320000 1'b1;
	quit = #20000 1'b0;
end 

// rerun
initial
begin
	rerun = 1'b0;
end 

// resume
initial
begin
	resume = 1'b0;
	resume = #400000 1'b1;
	resume = #20000 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #20000 1'b1;
end 

// stable
initial
begin
	stable = 1'b0;
end 

// trigger
initial
begin
	trigger = 1'b0;
	trigger = #30000 1'b1;
	trigger = #250000 1'b0;
end 
endmodule

