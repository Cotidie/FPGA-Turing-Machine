// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/02/2021 19:46:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BusMux4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BusMux4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] Din0;
reg [7:0] Din1;
reg [7:0] Din2;
reg [7:0] Din3;
reg [1:0] sel;
// wires                                               
wire [7:0] Dout;

// assign statements (if any)                          
BusMux4 i1 (
// port map - connection between master ports and signals/registers   
	.Din0(Din0),
	.Din1(Din1),
	.Din2(Din2),
	.Din3(Din3),
	.Dout(Dout),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// Din0[ 7 ]
initial
begin
	Din0[7] = 1'b0;
end 
// Din0[ 6 ]
initial
begin
	Din0[6] = 1'b0;
end 
// Din0[ 5 ]
initial
begin
	Din0[5] = 1'b0;
end 
// Din0[ 4 ]
initial
begin
	Din0[4] = 1'b0;
end 
// Din0[ 3 ]
initial
begin
	Din0[3] = 1'b1;
end 
// Din0[ 2 ]
initial
begin
	Din0[2] = 1'b1;
end 
// Din0[ 1 ]
initial
begin
	Din0[1] = 1'b1;
end 
// Din0[ 0 ]
initial
begin
	Din0[0] = 1'b1;
end 
// Din1[ 7 ]
initial
begin
	Din1[7] = 1'b0;
end 
// Din1[ 6 ]
initial
begin
	Din1[6] = 1'b0;
end 
// Din1[ 5 ]
initial
begin
	Din1[5] = 1'b0;
end 
// Din1[ 4 ]
initial
begin
	Din1[4] = 1'b1;
end 
// Din1[ 3 ]
initial
begin
	Din1[3] = 1'b0;
end 
// Din1[ 2 ]
initial
begin
	Din1[2] = 1'b1;
end 
// Din1[ 1 ]
initial
begin
	Din1[1] = 1'b0;
end 
// Din1[ 0 ]
initial
begin
	Din1[0] = 1'b0;
end 
// Din2[ 7 ]
initial
begin
	Din2[7] = 1'b0;
end 
// Din2[ 6 ]
initial
begin
	Din2[6] = 1'b0;
end 
// Din2[ 5 ]
initial
begin
	Din2[5] = 1'b0;
end 
// Din2[ 4 ]
initial
begin
	Din2[4] = 1'b1;
end 
// Din2[ 3 ]
initial
begin
	Din2[3] = 1'b1;
end 
// Din2[ 2 ]
initial
begin
	Din2[2] = 1'b0;
end 
// Din2[ 1 ]
initial
begin
	Din2[1] = 1'b0;
end 
// Din2[ 0 ]
initial
begin
	Din2[0] = 1'b1;
end 
// Din3[ 7 ]
initial
begin
	Din3[7] = 1'b0;
end 
// Din3[ 6 ]
initial
begin
	Din3[6] = 1'b0;
end 
// Din3[ 5 ]
initial
begin
	Din3[5] = 1'b0;
end 
// Din3[ 4 ]
initial
begin
	Din3[4] = 1'b1;
end 
// Din3[ 3 ]
initial
begin
	Din3[3] = 1'b1;
end 
// Din3[ 2 ]
initial
begin
	Din3[2] = 1'b1;
end 
// Din3[ 1 ]
initial
begin
	Din3[1] = 1'b1;
end 
// Din3[ 0 ]
initial
begin
	Din3[0] = 1'b0;
end 
// sel[ 1 ]
initial
begin
	sel[1] = 1'b0;
	sel[1] = #220000 1'b1;
	sel[1] = #340000 1'b0;
end 
// sel[ 0 ]
initial
begin
	sel[0] = 1'b0;
	sel[0] = #100000 1'b1;
	sel[0] = #120000 1'b0;
	sel[0] = #140000 1'b1;
	sel[0] = #200000 1'b0;
end 
endmodule

